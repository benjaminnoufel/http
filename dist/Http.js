"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class t extends Error{code;constructor(t,e){super(),this.code=t,this.message=e}}exports.Http=class{_body;_formData;_credentials;_headers;_method;_requestInit;_mode;constructor(){this._method="GET",this._headers={},this._mode="same-origin",this._credentials="same-origin",this._requestInit={}}isJsonFormat=t=>Boolean(null!==t&&-1!==t.indexOf("application/json"));getFetchOptions=()=>({body:this._formData??this._body,credentials:this._credentials,headers:this._headers,method:this._method,mode:this._mode});requestInit(t){return this._requestInit={...this._requestInit,...t},this}method(t){return this._method=t.toUpperCase(),this}header(e,s){if("string"!=typeof e||"string"!=typeof s)throw new t(422,"property or value must be a string");return this._headers={...this._headers,[e]:s.toLowerCase()},this}formData(t){return this._formData=new FormData(t),this}appendFormData(e,s,o){if("string"!=typeof e)throw new t(422,"key must be a string and value must be a string or instance of Blob or instance of File");if(!("string"==typeof s||s instanceof File||s instanceof Blob))throw new t(422,"key must be a string and value must be a string or instance of Blob or instance of File");return void 0!==this._formData&&this.formData(),s instanceof Blob?this._formData?.append(e,s,o):this._formData?.append(e,s),this}body(t){return this._body=JSON.stringify(t),this}mode(t){return void 0!==t&&(this._mode=t),this}credentials(t){return void 0!==t&&(this._credentials=t),this}text(e){if("string"!=typeof e)throw new t(422,`url must be a string not '${typeof e}'`);return fetch(e,{...this.getFetchOptions(),...this._requestInit}).then((async e=>{if(e.ok)return e.clone().text();const s=await e.clone().text();throw new t(e.clone().status,s)}))}blob(e){if("string"!=typeof e)throw new t(422,`url must be a string not '${typeof e}'`);return fetch(e,{...this.getFetchOptions(),...this._requestInit}).then((async e=>{if(e.ok)return e.clone().blob();const s=await e.clone().text();throw new t(e.clone().status,s)}))}json(e){if("string"!=typeof e)throw new t(422,`url must be a string not '${typeof e}'`);return fetch(e,{...this.getFetchOptions(),...this._requestInit}).then((async e=>{const s=e.headers.get("content-type");if(this.isJsonFormat(s)){if(e.ok)return e.clone().json();const s=await e.clone().json();throw new t(e.clone().status,JSON.stringify(s))}const o=await e.clone().text();throw new t(e.clone().status,o)}))}},exports.ValidatorError=t;
